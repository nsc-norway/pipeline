TODO: implement



def move_files(instrument, runid, output_dir, project_name, sample_sheet_data, reads):
    """Rename result files after demultiplexing"""

    proj_dir = samplesheet.get_project_dir(runid, project_name)
    project_path = output_dir + "/" + proj_dir
    
    params = []
    for i, row in enumerate(sample_sheet_data):
        for r in reads:
            par = dict(row)
            par['samplename'] = par['samplename']

            par['read'] = r
            par['base'] = output_dir
            par['index'] = i+1
            par['project'] = project_name
            par['project_path'] = project_path
            params.append(par)

    for p in params:
        f = "{samplename}_S{index}_R{read}_001.fastq.gz".format( **p)
        input_path = "{base}/{project}/{sampleid}/{filename}".format(filename=f, **p)
        output_path = os.path.join(project_path, f)
        print "in", input_path, "out", output_path
        os.rename(input_path, output_path)

    for dpath in set("{base}/{project}/{sampleid}".format(**p) for p in params):
        os.rmdir(dpath)
    for dpath in set("{base}/{project}".format(**p) for p in params):
        os.rmdir(dpath)


def main():
        # The projects tree has the desired paths to all the samples
        # We need to move the samples from the places actually generated by the demultiplexing
        # tool, to the paths given in the projects tree.
        projects = samples.get_projects(run_id, sample_sheet['data'], TODO, no_lane_splitting)
        move_files(TODO)

