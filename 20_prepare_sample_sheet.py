# Prepare sample sheet for demultiplexing. 

# The sample sheet generated by Clarity LIMS is not compatible with
# bcl2fastq2. This script adds two headers to the sample sheet to make
# it readable by bcl2fastq2.

# Sample sheet management:
#  * LIMS mode *
#  - This script takes the sample sheet from the sequencing process. If
#    no sequencing process is found, it takes it from <run folder>/SampleSheet.csv
#  - It adds the headers and copies it to the process in the LIMS. It also writes
#    the sample sheet to DemultiplexingSampleSheet.csv in the run folder, for 
#    consistency with the non-LIMS operation mode.
#  - Other tasks always take the sample sheet from the LIMS process, but 
#    the demultiplexing process also writes it to DemultiplexingSampleSheet.csv
#    (overwrites it, to make sure it's using the correct sample sheet)
#
#  * Command line mode *
#  - This script reads the sample sheet from SampleSheet.csv and writes it to
#    DemutliplexingSampleSheet.csv. The input sample sheet file may be overridden
#    with the --input-sample-sheet option. TODO
#  - Other tasks read the sample sheet from DemultiplexingSampleSheet.csv or 
#    another file provided on the command line.

# Since this script must deal with two sample sheets, input and output, it can't
# use the "taskmgr.Task" interface, and has to manually I/O the sample sheets.

import os.path, sys
import argparse
import subprocess
import datetime

from genologics.lims import *
from common import nsc, utilities, slurm, taskmgr

TASK_NAME = "Copy run"
TASK_DESCRIPTION = "Copy run metadata"
TASK_ARGS = ['work_dir']


def main(task):
    """Sample sheet processing."""

    task.add_argument(
            '--input-sample-sheet',
            default=None,
            help="Path to source sample sheet to transform"
            )
    task.add_argument(
            '--output-sample-sheet',
            default=None,
            help="Path to destination sample sheet to write"
            )
    os.umask(007)
    task.running()

    if task.process:
        

    
    if rc == 0:
        task.success_finish()
    else:
        detail = None
        if task.process: #LIMS
            detail = open(logfile).read()
        utilities.fail("rsync failed", detail)



with taskmgr.Task(TASK_NAME, TASK_DESCRIPTION, TASK_ARGS) as task:
    main(task)

